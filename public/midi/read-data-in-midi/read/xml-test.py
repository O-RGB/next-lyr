import re
import zlib
import base64
import json

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ ---
# KLyrHdr1 Version
MIDI_FILE_PATH_K_VER = "/Users/digixtwo/Documents/Project/next-lyr/public/midi/read-data-in-midi/MHY27.mid"
# LyrHdr1 Version
MIDI_FILE_PATH_L_VER = "/Users/digixtwo/Documents/Project/next-lyr/public/midi/read-data-in-midi/update/MHY27_cleaned-saved.mid"
THAI_ENCODING = "tis-620"  # encoding ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≤‡∏£‡∏≤‡πÇ‡∏≠‡πÄ‡∏Å‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤

def find_and_decode_karaoke_lyrics(file_path):
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå: {file_path}")
    
    try:
        with open(file_path, "rb") as f:
            midi_data = f.read()
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}' ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Text Event ‡∏ó‡∏µ‡πà‡∏°‡∏µ KLyrHdr1 ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payload
    pattern = b'\xFF\x01.*?KLyrHdr1(.*?)\x00'
    match = re.search(pattern, midi_data, re.DOTALL)

    if not match:
        print("ü§∑ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Extreme Karaoke (KLyrHdr)")
        return

    print("‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ß‡πâ! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™...")

    encoded_payload = match.group(1)

    try:
        # base64 decode -> zlib decompress
        compressed_data = base64.b64decode(encoded_payload)
        decompressed_data = zlib.decompress(compressed_data)

        # ‡πÅ‡∏õ‡∏•‡∏á binary ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        lyrics_text = decompressed_data.decode(THAI_ENCODING, errors='ignore')

        # DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡πÑ‡∏î‡πâ
        print("\nüß™ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏î‡πâ (‡πÅ‡∏™‡∏î‡∏á 1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å):\n")
        print(lyrics_text[:2000])
        print("\n--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ---\n")

        # üß† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏Ç‡∏≠‡∏á object { name, tick }
        def parse_lyrics_to_json(raw_text):
            pattern = re.compile(r'TIME(\d+)TIME\s*TEXT(.*?)TEXT', re.DOTALL)
            matches = pattern.findall(raw_text)
            results = [{"name": name.strip(), "tick": int(tick)} for tick, name in matches if name.strip()]
            return results

        lyrics_json = parse_lyrics_to_json(lyrics_text)

        print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", len(lyrics_json))
        print("\n--- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON ---\n")
        print(json.dumps(lyrics_json[:20], ensure_ascii=False, indent=2))  # ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å
        

        return lyrics_json

    except Exception as e:
        print(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: {e}")
        print("‚ö†Ô∏è ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")

# --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ---
if __name__ == "__main__":
    find_and_decode_karaoke_lyrics(MIDI_FILE_PATH_K_VER)
    find_and_decode_karaoke_lyrics(MIDI_FILE_PATH_L_VER)
