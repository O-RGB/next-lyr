import re

def analyze_midi_headers(file_path):
    try:
        with open(file_path, "rb") as f:
            midi_data = f.read()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file_path} ({e})")
        return

    print(f"üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå: {file_path}\n")

    pattern = b"\xFF\x01(.{4,64}?)\x00"
    matches = re.findall(pattern, midi_data, re.DOTALL)

    if not matches:
        print("ü§∑ ‡πÑ‡∏°‡πà‡∏û‡∏ö meta text events ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö \xFF\x01")
        return

    print("üîé ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô Header ‡∏´‡∏£‡∏∑‡∏≠ Metadata:")
    for i, raw in enumerate(matches, 1):
        try:
            text = raw.decode("latin1", errors="ignore").strip()
        except Exception:
            text = "(‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)"
        print(f"  {i:02d}. {text}")

    print(f"\nüìä ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(matches)} meta events\n")

# üß™ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    midi_path = "/Users/digixtwo/Desktop/‡∏ô‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≠‡∏á (1).mid"
    analyze_midi_headers(midi_path)
