import os
import re
from collections import Counter
from tqdm import tqdm  # pip install tqdm

SONG_ROOT_NAME = "Song"

def shorten_path(full_path, keyword="Song"):
    parts = full_path.split(os.sep)
    try:
        start_index = parts.index(keyword)
        return os.path.join(*parts[start_index:])
    except ValueError:
        return full_path

def detect_flexible_lyr_header(midi_data):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö header ‡∏Ç‡∏≠‡∏á lyrics ‡πÉ‡∏ô MIDI data
    ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö pattern ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô KLyrHdr1, LyrHdr2, LyrHdr ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    """
    pattern = re.compile(rb'(K?LyrHdr\d*)', re.IGNORECASE)
    match = pattern.search(midi_data)
    if match:
        return match.group(0).decode('ascii', errors='ignore')
    return "Unknown"

def detect_lyr_header(file_path):
    try:
        with open(file_path, "rb") as f:
            midi_data = f.read()
    except Exception:
        return "‚ùå‡πÑ‡∏°‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"

    return detect_flexible_lyr_header(midi_data)

def analyze_headers(folder_path):
    header_counts = Counter()
    all_files = []

    # üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå MIDI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for dirpath, _, filenames in os.walk(folder_path):
        for filename in filenames:
            if filename.lower().endswith((".mid", ".midi")):
                all_files.append(os.path.join(dirpath, filename))

    print(f"üöÄ ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(all_files)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")

    # üèÉ‚Äç‚ôÇÔ∏è ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß: ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á header ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    for full_path in tqdm(all_files, desc="üîé ‡∏ï‡∏£‡∏ß‡∏à header", unit="‡πÑ‡∏ü‡∏•‡πå"):
        header_type = detect_lyr_header(full_path)
        header_counts[header_type] += 1

    return header_counts

if __name__ == "__main__":
    folder_path = "/Users/digixtwo/Desktop/karaoke_API/karaoke.env/final-app/eXtreme Karaoke 2025.6/eXtreme Karaoke 2025/Songs/MIDI/NCN/Song"
    header_stats = analyze_headers(folder_path)

    print("\nüìä ‡∏™‡∏£‡∏∏‡∏õ header ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
    total_files = sum(header_stats.values())
    for header, count in header_stats.most_common():
        percent = (count / total_files) * 100
        print(f"{header:15} {count:5} ‡πÑ‡∏ü‡∏•‡πå ({percent:.2f}%)")

    print(f"\n‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_files} ‡πÑ‡∏ü‡∏•‡πå")
