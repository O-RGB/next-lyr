import mido
import os

def clear_midi_data(input_path: str, output_path: str):
    """
    Loads a MIDI file, removes all lyric, text, and chord data, and saves it to a new file.

    This function is more aggressive and removes:
    1. All Text events (msg.type == 'text'), which often contain lyrics or other metadata.
    2. All Marker events (msg.type == 'marker'), which are often used for chords.
    3. All standard Lyric events (msg.type == 'lyric').

    It correctly handles the delta times of the messages to ensure the MIDI timing
    remains intact after removing events.

    Args:
        input_path (str): The path to the source MIDI file.
        output_path (str): The path where the cleaned MIDI file will be saved.
    """
    try:
        # Load the original MIDI file
        midi = mido.MidiFile(input_path)
        print(f"üóÇÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {input_path}")

    except FileNotFoundError:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà '{input_path}'")
        return
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå MIDI: {e}")
        return

    # Iterate through each track in the MIDI file
    for i, track in enumerate(midi.tracks):
        # A list to hold the messages we want to keep
        new_messages = []
        # This variable will accumulate the delta time of removed messages
        time_accumulator = 0

        # Iterate through each message in the track
        for msg in track:
            # --- Define condition for removing a message ---
            # We will remove any message that is of type 'text', 'marker', or 'lyric'
            is_removable = msg.type in ['text', 'marker', 'lyric']

            if is_removable:
                # Add the message's time to the accumulator. This delta time
                # needs to be passed on to the next valid message.
                time_accumulator += msg.time
                
                # Log what is being removed for clarity
                log_text = (msg.text[:40] + '...') if len(msg.text) > 40 else msg.text
                print(f"   - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö '{msg.type}' event ('{log_text.strip()}') ‡∏à‡∏≤‡∏Å Track {i}...")

            else:
                # If we are keeping this message, add the accumulated time
                # from any previously removed messages to its delta time.
                if time_accumulator > 0:
                    msg.time += time_accumulator
                    time_accumulator = 0 # Reset the accumulator
                
                new_messages.append(msg)
        
        # Replace the old track content with the new, filtered content
        track[:] = new_messages

    try:
        # Save the modified MIDI object to the new file
        midi.save(output_path)
        print(f"\n‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {output_path}")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå MIDI: {e}")


# --- Example Usage ---
if __name__ == "__main__":
    # --- Configuration ---
    # ‚ùó ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    # ‚ùó Please change the file paths below to match your file locations.
    
    # ‡πÉ‡∏™‡πà‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå MIDI ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    # --- This path was taken from your log output ---
    INPUT_MIDI_PATH = "/Users/digixtwo/Documents/Project/next-lyr/public/midi/read-data-in-midi/build/MHY27.mid"
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏ò‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
    OUTPUT_MIDI_PATH = "/Users/digixtwo/Documents/Project/next-lyr/public/midi/read-data-in-midi/build/MHY27_cleaned.mid"

    # --- Run the cleaning function ---
    # Check if the input file exists before running
    if not os.path.exists(INPUT_MIDI_PATH):
         print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà '{INPUT_MIDI_PATH}'")
         print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ INPUT_MIDI_PATH ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        clear_midi_data(INPUT_MIDI_PATH, OUTPUT_MIDI_PATH)
